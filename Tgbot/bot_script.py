import telebot
from dotenv import load_dotenv
import os
import requests
import time
from threading import Thread, Lock
from datetime import datetime, timedelta
import logging
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()

class BookingBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.token:
            logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        self.api_url = os.getenv('DJANGO_API_URL')
        if not self.api_url:
            logger.error("URL API –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            raise ValueError("URL API –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        self.bot = telebot.TeleBot(self.token, threaded=False)
        self.last_notification = {}
        self.lock = Lock()
        self.running = False
        self.setup_handlers()
        
    def setup_handlers(self):
        @self.bot.message_handler(commands=['start', 'help'])
        def handle_start(message):
            try:
                user = message.from_user
                welcome_msg = (
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or '–¥—Ä—É–≥'}!\n\n"
                    "–Ø ‚Äî —á–∞—Ç-–±–æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Rooms.\n"
                    "–ë—É–¥—É –∑–∞—Ä–∞–Ω–µ–µ –æ–ø–æ–≤–µ—â–∞—Ç—å —Ç–µ–±—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –±—Ä–æ–Ω–∏, —á—Ç–æ–±—ã —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª.\n"
                )
                self.bot.reply_to(message, welcome_msg, parse_mode='Markdown')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_start: {e}", exc_info=True)

    def get_upcoming_bookings(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏–∑ API"""
        try:
            logger.info("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...")
            response = requests.get(
                f"{self.api_url}upcoming-notifications/",
                timeout=10
            )
            response.raise_for_status()
            data = response.json()
            
            if isinstance(data, dict) and 'notifications' in data:
                bookings = data['notifications']
            elif isinstance(data, list):
                bookings = data
            else:
                logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {data}")
                return []
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(bookings)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
            return bookings
                
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}", exc_info=True)
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return []

    def send_notification(self, booking, minutes_before):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            if not booking.get('telegram_id'):
                logger.warning(f"–ù–µ—Ç telegram_id –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {booking}")
                return False
                
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
            time_slots = sorted(booking.get('time_slots', []), 
                              key=lambda x: x['time_begin'])
            
            if not time_slots:
                logger.warning(f"–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {booking}")
                return False
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            time_range = f"{time_slots[0]['time_begin']} - {time_slots[-1]['time_end']}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            hour_key = f"{booking['telegram_id']}_{booking['booking_id']}_60"
            was_hour_notification = hour_key in self.last_notification
            
            if minutes_before == 60:
                time_left = "1 —á–∞—Å"
                emoji = "‚è∞"
                greeting = f"–ü—Ä–∏–≤–µ—Ç, {booking.get('username', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!\n\n"
            else:
                time_left = "15 –º–∏–Ω—É—Ç"
                emoji = "üîî"
                greeting = "–ü–æ—Ä–∞ –ø–æ—Ç–æ—Ä–æ–ø–∏—Ç—å—Å—è:\n\n" if was_hour_notification else f"–ü—Ä–∏–≤–µ—Ç, {booking.get('username', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!\n\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"{emoji} {greeting}"
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ (—á–µ—Ä–µ–∑ {time_left}):\n"
                f"üìç *–õ–æ–∫–∞—Ü–∏—è*: {booking.get('location_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"üè† *–ê–¥—Ä–µ—Å*: {booking.get('location_address', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üö™ *–ö–æ–º–Ω–∞—Ç–∞*: {booking.get('room_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"üìÖ *–î–∞—Ç–∞*: {booking.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"üïí *–í—Ä–µ–º—è*: {time_range}\n\n"
                f"–°—Ç–∞—Ç—É—Å: ‚è≥ *–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*"
            )
            
            self.bot.send_message(
                booking['telegram_id'],
                message,
                parse_mode='Markdown'
            )
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}", exc_info=True)
            return False

    def send_cancellation_notification(self, booking):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        time_slots = sorted(booking.get('time_slots', []), 
                    key=lambda x: x['time_begin'])
        time_range = f"{time_slots[0]['time_begin']} - {time_slots[-1]['time_end']}"

        try:
            if not booking.get('telegram_id'):
                logger.warning(f"–ù–µ—Ç telegram_id –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {booking}")
                return False

            message = (
                f"‚ùå –ü—Ä–∏–≤–µ—Ç, {booking.get('username', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!\n\n"
                "–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –Ω–µ –±—ã–ª–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –≤–æ–≤—Ä–µ–º—è.\n"
                f"üìç *–õ–æ–∫–∞—Ü–∏—è*: {booking.get('location_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"üö™ *–ö–æ–º–Ω–∞—Ç–∞*: {booking.get('room_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"üìÖ *–î–∞—Ç–∞*: {booking.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"üïí *–í—Ä–µ–º—è*: {time_range}\n\n"
            )

            self.bot.send_message(
                booking['telegram_id'],
                message,
                parse_mode='Markdown'
            )
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ: {e}", exc_info=True)
            return False

    def update_booking_review(self, booking_id):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º"""
        try:
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking_id}...")
            response = requests.patch(
                f"{self.api_url}{booking_id}/update/",
                json={"review": -20},
                timeout=10
            )
            response.raise_for_status()
            logger.info(f"–†–µ–π—Ç–∏–Ω–≥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
            return True
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking_id}: {e}", exc_info=True)
            return False

    def delete_booking(self, booking):
        """–£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            booking_id = booking['booking_id']
            logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking_id}...")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if self.update_booking_review(booking_id):
                logger.info(f"–†–µ–π—Ç–∏–Ω–≥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking_id} –æ–±–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º.")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
            if self.send_cancellation_notification(booking):
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking_id}")

            # –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            response = requests.delete(
                f"{self.api_url}{booking_id}/delete/",
                timeout=10
            )
            response.raise_for_status()
            logger.info(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
            return True
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking_id}: {e}", exc_info=True)
            return False

    def check_bookings(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
        while self.running:
            try:
                now = datetime.now()
                logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...")
                
                bookings = self.get_upcoming_bookings()
                notifications_sent = 0
                bookings_deleted = 0
                
                for booking in bookings:
                    if not isinstance(booking, dict):
                        continue
                        
                    required_fields = ['telegram_id', 'status', 'booking_id', 
                                    'date', 'time_slots', 'room_name']
                    if not all(k in booking for k in required_fields):
                        logger.warning(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {booking}")
                        continue
                        
                    if booking['status'].lower() != 'pending':
                        continue
                        
                    try:
                        booking_date = datetime.strptime(booking['date'], "%Y-%m-%d").date()
                        if booking_date != now.date():
                            continue
                            
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
                        for slot in booking['time_slots']:
                            try:
                                start_time = datetime.strptime(slot['time_begin'], "%H:%M").time()
                                booking_datetime = datetime.combine(booking_date, start_time)
                                time_diff = (booking_datetime - now).total_seconds() / 60
                                
                                logger.info(f"–í—Ä–µ–º—è –¥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking['booking_id']}: {time_diff} –º–∏–Ω—É—Ç")
                                
                                if 55 < time_diff <= 65:  
                                    if self.send_appropriate_notification(booking, 60):
                                        notifications_sent += 1
                                elif 10 < time_diff <= 20:  
                                    if self.send_appropriate_notification(booking, 15):
                                        notifications_sent += 1
                                elif time_diff < -5:  
                                    if self.delete_booking(booking):
                                        bookings_deleted += 1
                                        
                            except ValueError as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}", exc_info=True)
                                continue
                                
                    except ValueError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –¥–∞—Ç—ã: {e}", exc_info=True)
                        continue
                
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications_sent}, —É–¥–∞–ª–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {bookings_deleted}")
                time.sleep(60)
                
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
                time.sleep(60)

    def send_appropriate_notification(self, booking, minutes_before):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        key = f"{booking['telegram_id']}_{booking['booking_id']}_{minutes_before}"
        
        with self.lock:
            last_sent = self.last_notification.get(key)
            if last_sent and (datetime.now() - last_sent) < timedelta(hours=23):
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ: {key}")
                return False
                
            if self.send_notification(booking, minutes_before):
                self.last_notification[key] = datetime.now()
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–∑–∞ {minutes_before} –º–∏–Ω): {key}")
                return True
            return False

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        self.running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        notification_thread = Thread(target=self.check_bookings, daemon=True)
        notification_thread.start()
        
        try:
            self.bot.polling(none_stop=True, skip_pending=True, timeout=20)
        except telebot.apihelper.ApiTelegramException as e:
            if e.error_code == 409:
                logger.error("–û—à–∏–±–∫–∞: —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}", exc_info=True)
        except Exception as e:
            logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        finally:
            self.running = False
            notification_thread.join()
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    try:
        bot = BookingBot()
        bot.run()
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)
        sys.exit(1)